/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const crypto = require('crypto');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –¥–ª—è cron-–∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
const generateApiKey = () => {
  return crypto.randomBytes(32).toString('hex');
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å API –∫–ª—é—á–æ–º
const setupEnvFile = () => {
  const envPath = path.join(process.cwd(), '.env.local');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  let envContent = '';
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ
  if (!envContent.includes('CRON_API_KEY=')) {
    const apiKey = generateApiKey();
    const newEnvContent = envContent + `\n# API –∫–ª—é—á –¥–ª—è cron-–∑–∞–¥–∞—á\nCRON_API_KEY=${apiKey}\n`;
    
    fs.writeFileSync(envPath, newEnvContent);
    console.log('‚úÖ API –∫–ª—é—á –¥–ª—è cron-–∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env.local');
  } else {
    console.log('‚úÖ API –∫–ª—é—á –¥–ª—è cron-–∑–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ .env.local');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
const getApiKey = () => {
  const envPath = path.join(process.cwd(), '.env.local');
  
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const match = envContent.match(/CRON_API_KEY=([^\s]+)/);
    
    if (match && match[1]) {
      return match[1];
    }
  }
  
  return null;
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (Linux/macOS)
const setupCronJob = () => {
  const apiKey = getApiKey();
  
  if (!apiKey) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ .env.local');
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
  const apiUrl = `${baseUrl}/api/cron/update-appointment-status`;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è cron
  const command = `0 * * * * curl -X GET "${apiUrl}" -H "Authorization: Bearer ${apiKey}" > /dev/null 2>&1`;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏
  exec('crontab -l', (error, stdout) => {
    let crontab = '';
    
    if (!error) {
      crontab = stdout;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞
    if (!crontab.includes(apiUrl)) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
      const newCrontab = crontab + `\n# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n${command}\n`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
      const tempFile = path.join(process.cwd(), 'temp-crontab');
      fs.writeFileSync(tempFile, newCrontab);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
      exec(`crontab ${tempFile}`, (err) => {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(tempFile);
        
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ cron-–∑–∞–¥–∞—á–∏:', err);
        } else {
          console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
      });
    } else {
      console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
const checkOS = () => {
  const platform = process.platform;
  
  if (platform === 'win32') {
    console.log('‚ö†Ô∏è Windows –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –î–ª—è Windows —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Task Scheduler –≤—Ä—É—á–Ω—É—é.');
    console.log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Task Scheduler (–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π)');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å');
    console.log(`3. –ö–æ–º–∞–Ω–¥–∞: curl -X GET "${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/cron/update-appointment-status" -H "Authorization: Bearer ${getApiKey()}"`);
    return false;
  }
  
  return true;
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–µ–π...');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º .env —Ñ–∞–π–ª
  setupEnvFile();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–° –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Windows
  if (checkOS()) {
    setupCronJob();
  }
  
  console.log('\nüìù –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:');
  console.log(`curl -X GET "${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/cron/update-appointment-status" -H "Authorization: Bearer ${getApiKey()}"\n`);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 